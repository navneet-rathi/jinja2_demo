---
- name: Get the version of softwares
  hosts: containers
  gather_facts: false
  tasks:
    - name: Get the version of avalable application
      ansible.builtin.uri:
        url: "http://{{ item.value.host }}:{{item.value.port}}/version.html"
        return_content: true
      register: versioninfo
      delegate_to: localhost
      failed_when: versioninfo is failed #or "'version:' not in versioninfo.content"
      loop: "{{lookup('ansible.builtin.dict',app)}}"    

    #- ansible.builtin.debug:
    #    msg: "{{versioninfo.results}}"

  #  - debug: 
  #      msg: "{{ item }}" 
  #    loop: "{{ versioninfo.results|map(attribute='url')|list}}"


  #  - debug: 
  #      msg: "{{ item }}"
  #    loop: "{{ versioninfo.results|map(attribute='content')|list}}"

    - name: create an app dir in /tmp on ceontroller
      ansible.builtin.file:
        path: /tmp/app
        owner: root
        group: root
        mode: '0755'
        state: directory
      delegate_to: localhost

    - name: Genrate a CSV file
      ansible.builtin.template:
        src: display.j2
        dest: /tmp/app/version_info-{{inventory_hostname}}.csv
      delegate_to: localhost

#    - debug: 
#        msg: "{{ item['item']['key'] }}"
#      loop: "{{ versioninfo.results|list}}"
#
    - name: Assemble from fragments of CSVs from a directory
      ansible.builtin.assemble:
        src: /tmp/app
        dest: /tmp/mysql_app.txt
      delegate_to: localhost

    - name: Read all data from CSV file and return a list
      community.general.read_csv:
        path: /tmp/mysql_app.txt
        fieldnames: host,application,version,date,port
        delimiter: ','
      register: appdata
      delegate_to: localhost

    - set_fact:
        db_database: version_data
        db_host: 192.168.1.18
        db_user: root
        db_password: root

    - debug:
        msg: "{{ appdata }}"
 
    - name: Removing older data of versions from DB {{ db_database }} 
      community.mysql.mysql_query:
         login_host: "{{ db_host }}"
         login_db: "{{ db_database }}"
         login_user: "{{ db_user }}"
         login_password: "{{ db_password }}"
         query:
           - TRUNCATE TABLE appversion; 
      delegate_to: localhost

    - name: Loading new data by Running several insert queries against db {{ db_database }} 
      community.mysql.mysql_query:
         login_host: "{{ db_host }}"
         login_db: "{{ db_database }}"
         login_user: "{{ db_user }}"
         login_password: "{{ db_password }}"
         query:
           - INSERT INTO appversion (host, application,Unique_instance ,version, Date, Port) VALUES ("{{item.host}}","app","{{item.host}}-{{item.application}}-{{item.port}}","{{item.version}}","{{item.date}}","{{item.port}}")
      loop: "{{ appdata.list }}"
      ignore_errors: true
      register: querystatus
      delegate_to: localhost

- hosts: 192.168.1.14
  gather_facts: no
  tasks:
    - name: Get Grafana Dashboard
      uri:
        url: "http://192.168.1.18:3000/d/fdlcrnfeocdmod/version-control-application"
        headers:
          Authorization: "Bearer glsa_3P9Kazzvf2EWe0XCMqBXR2zpYganTGxs_e8147d75"
        return_content: yes
      register: dashboard_response

    - debug:
        msg: "{{ dashboard_response }}"

    - name: Save Dashboard JSON
      copy:
        content: "{{ dashboard_response.json }}"
        dest: "/tmp/dashboard.json"

    - name: Convert JSON to PDF
      command: "wkhtmltopdf --page-width 1920 --page-height 1080 /tmp/dashboard.json /tmp/dashboard.pdf"

      
